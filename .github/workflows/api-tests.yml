name: Explore With Me API Tests

on:
  pull_request:
  workflow_call:

jobs:
  check-repo:
    runs-on: ubuntu-latest

    steps:
      - name: Check repo not fork and public
        run: |
          REPO=$(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" "/repos/${GITHUB_REPOSITORY}")
          FORK=$(jq '.fork' <<< "$REPO")
          PRIVATE=$(jq '.private' <<< "$REPO")
          echo "FORK='$FORK', PRIVATE='$PRIVATE', GITHUB_REPOSITORY_OWNER=${GITHUB_REPOSITORY_OWNER} "
          if [[ "$FORK" == "true" ]]
          then
            echo "Use the repository automatically created by Yandex Practicum (works in fork repositories are not accepted)"
            echo "Используйте только репозиторий созданный Yandex Practicum, работы в форк репозитории не принимаются"
            exit -1
          fi
          if [[ "$GITHUB_REPOSITORY_OWNER" == "yandex-praktikum" ]]
          then
            echo "Use the repository automatically created by Yandex Practicum (works in fork repositories are not accepted)"
            echo "Используйте только репозиторий созданный Yandex Practicum, работы в форк репозитории не принимаются"
            exit -2
          fi
          if [[ "$PRIVATE" == "true" && "$GITHUB_REPOSITORY_OWNER" != "praktikum-java" ]]
          then
            echo "Share your repository, make it public"
            echo "Откройте доступ к вашему репозиторию, сделайте его публичным"
            exit -3
          fi
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Check branch name
        run: |
          if [[ "$GITHUB_BASE_REF" != "main" && "$GITHUB_BASE_REF" != "stat_svc" && "$GITHUB_BASE_REF" != "main_svc" && "$GITHUB_BASE_REF" != "feature" && "$GITHUB_REPOSITORY_OWNER" != "praktikum-java" ]]
          then
            echo "Set the pull request to merge branch 'main' or 'stat_svc' or 'main_svc' or 'feature' (instead of '$GITHUB_BASE_REF')"
            echo "Задайте в Pull request ветку слияния 'main' или 'stat_svc' или 'main_svc' или 'feature' (вместо '$GITHUB_BASE_REF')"
            exit -2
          fi
          echo "Github target '$GITHUB_BASE_REF' - OK"

          if [[ "$GITHUB_HEAD_REF" == "stat_svc" ]] || [[ "$GITHUB_HEAD_REF" == stat_svc* ]]
          then
            echo "Statistic service - OK"
            exit
          fi
          if [[ "$GITHUB_HEAD_REF" == "main_svc" ]] || [[ "$GITHUB_HEAD_REF" == main_svc* ]]
          then
            echo "Main service - OK"
            PULL=$(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28"  /repos/${GITHUB_REPOSITORY}/pulls?head=${GITHUB_REPOSITORY_OWNER}:stat_svc || true)
            OPEN=$(jq '. | length' <<< "$PULL")
            if [[ "$OPEN" != "0" && "$GITHUB_REPOSITORY_OWNER" != "praktikum-java" ]]
            then
              PULL_URL=$(jq '.[0].html_url' <<< "$PULL")
              echo "Merge the stat_svc branch pull request: ${PULL_URL}"
              echo "Объедините pull request ветки stat_svc: ${PULL_URL}"
              exit -3
            fi
            echo "Statistic service - Merged"
            exit
          fi
          if [[ "$GITHUB_HEAD_REF" == "feature" ]] || [[ "$GITHUB_HEAD_REF" == feature* ]] 
          then
            echo "Feature service - OK"
            PULL=$(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28"  /repos/${GITHUB_REPOSITORY}/pulls?head=${GITHUB_REPOSITORY_OWNER}:main_svc || true)
            OPEN=$(jq '. | length' <<< "$PULL")
            if [[ "$OPEN" != "0" && "$GITHUB_REPOSITORY_OWNER" != "praktikum-java" ]]
            then
              PULL_URL=$(jq '.[0].html_url' <<< "$PULL")
              echo "Merge the main_svc branch pull request: ${PULL_URL}"
              echo "Объедините pull request ветки main_svc: ${PULL_URL}"
              exit -4
            fi
            echo "Main service - Merged"
            exit
          fi
          echo "Correct branch name '$GITHUB_HEAD_REF' according to the spec, allowed: stat_svc, stat_svc*, main_svc, main_svc*, feature, feature*"
          echo "Исправьте пожалуйста имя ветки '$GITHUB_HEAD_REF' согласно заданию, разрешены: stat_svc, stat_svc*, main_svc, main_svc*, feature, feature*"
          exit -1
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Check files
        run: |
          PULL=$(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28"  /repos/${GITHUB_REPOSITORY}/pulls/${PULL_NUMBER}/files?per_page=100 || true)
          FILENAMES=$(jq '.[] | .filename' <<< "$PULL")
          if [[ "$FILENAMES"  =~ "api-tests.yml" ]]
          then
            echo "The pull request contains the api-tests.yml file and cannot be modified. Remove it from PR"
            echo "Pull request содержит файл api-tests.yml, его изменять нельзя. Удалите его из PR"
            exit -1
          fi
          if [[ "$FILENAMES"  =~ "checkstyle.xml" ]]
          then
            echo "The pull request contains the checkstyle.xml file and cannot be modified. Remove it from PR"
            echo "Pull request содержит файл checkstyle.xml, его изменять нельзя. Удалите его из PR"
            exit -2
          fi
          if [[ "$FILENAMES"  =~ ".class" ]] || [[ "$FILENAMES"  =~ ".jar" ]] || [[ "$FILENAMES"  =~ "mvn" ]] || [[ "$FILENAMES"  =~ ".DS_Store" ]] \
          || [[ "$FILENAMES"  =~ ".idea" ]] || [[ "$FILENAMES"  =~ ".iws" ]] || [[ "$FILENAMES"  =~ ".iml" ]] || [[ "$FILENAMES"  =~ ".ipr" ]] \
          || [[ "$FILENAMES"  =~ ".db" ]] || [[ "$FILENAMES"  =~ ".log" ]] || [[ "$FILENAMES"  =~ "out/" ]] || [[ "$FILENAMES"  =~ "target/" ]]
          then
            echo "The pull request contains the binary files. Remove them (*.class, *.jar, *.DS_Store ...) from PR"
            echo "Pull request содержит двоичные файлы. Удалите их (*.class, *.jar, *.DS_Store ...) из PR"
            exit -3
          fi
          echo "PR files - OK"
          exit
        env:
          PULL_NUMBER: ${{ github.event.number }}
          GH_TOKEN: ${{ github.token }}

  build-ewm:

    needs: check-repo
    runs-on: ubuntu-latest

    steps:
      - name: Checkout target repo
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Checkout tests
        uses: actions/checkout@v4
        with:
          repository: 'yandex-praktikum/java-explore-with-me'
          fetch-depth: 0
#          ref: ${{ github.event.pull_request.head.ref }}
          path: tests
      - run: |
          cd ./tests
          BASE_REF="main"
          if [[ "$GITHUB_HEAD_REF" == stat_svc* ]] 
          then
            BASE_REF="stat_svc"
          else
            if [[ "$GITHUB_HEAD_REF" == main_svc* ]] 
            then
              BASE_REF="main_svc"
            else
              if [[ "$GITHUB_HEAD_REF" == feature* ]] 
              then
                BASE_REF="feature"
              fi
            fi
          fi
          
          git checkout -f -B $GITHUB_HEAD_REF origin/$GITHUB_HEAD_REF || git checkout -f -B $BASE_REF origin/$BASE_REF

      - name: Check and Build application
        run: |
          cp -rf ./tests/checkstyle.xml ./checkstyle.xml
          cp -rf ./tests/suppressions.xml ./suppressions.xml
          mvn install -P check --no-transfer-progress
          docker-compose build

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: '16.x'

      - name: Install newman
        run: |
          npm install -g newman
          npm install -g newman-reporter-htmlextra

      - name: Run Stat Application
        if: contains(github.head_ref, 'stat')
        run: |
          docker-compose up --detach
          chmod a+x ./tests/.github/workflows/wait-for-it.sh
          ./tests/.github/workflows/wait-for-it.sh -t 60 localhost:9090
          docker-compose ps
          docker-compose logs

      - name: Run Stat and Main Application
        if:  ${{ !contains(github.head_ref, 'stat') }}
        run: |
          docker-compose up --detach
          chmod a+x ./tests/.github/workflows/wait-for-it.sh
          ./tests/.github/workflows/wait-for-it.sh -t 60 localhost:8080
          ./tests/.github/workflows/wait-for-it.sh -t 60 localhost:9090
          docker-compose ps
          docker-compose logs

      - name: Run POSTMAN tests on ewm-main-service
        if:  ${{ !contains(github.head_ref, 'stat') }}
        run: |
          if [[ "$GITHUB_HEAD_REF" != "main_svc" ]] && [[ "$GITHUB_HEAD_REF" != "feature" ]] && [[ -f "postman/ewm-main-service.json" ]] ; then
            newman run ./postman/ewm-main-service.json \
              --delay-request 50 -r cli,htmlextra \
              --verbose --color on --reporter-htmlextra-darkTheme \
              --reporter-htmlextra-export reports/ewm_main_report.html \
              --reporter-htmlextra-title "Отчет по тестам основного сервиса" \
              --reporter-htmlextra-logs true \
              --reporter-htmlextra-template ./tests/.github/workflows/dashboard-template.hbs
          else 
            newman run ./tests/postman/ewm-main-service.json \
              --delay-request 50 -r cli,htmlextra \
              --verbose --color on --reporter-htmlextra-darkTheme \
              --reporter-htmlextra-export reports/ewm_main_report.html \
              --reporter-htmlextra-title "Отчет по тестам основного сервиса" \
              --reporter-htmlextra-logs true \
              --reporter-htmlextra-template ./tests/.github/workflows/dashboard-template.hbs
          fi


      - name: Run POSTMAN tests on ewm-stat-service
        run: |
          if [[ "$GITHUB_HEAD_REF" != "stat_svc" ]] && [[ "$GITHUB_HEAD_REF" != "main_svc" ]] && [[ "$GITHUB_HEAD_REF" != "feature" ]] && [[ -f "postman/ewm-stat-service.json" ]] ; then
            newman run ./postman/ewm-stat-service.json \
              --delay-request 50 -r cli,htmlextra \
              --verbose --color on --reporter-htmlextra-darkTheme \
              --reporter-htmlextra-export reports/ewm_stat_report.html \
              --reporter-htmlextra-title "Отчет по тестам сервиса статистики" \
              --reporter-htmlextra-logs true \
              --reporter-htmlextra-template ./tests/.github/workflows/dashboard-template.hbs
          else 
            newman run ./tests/postman/ewm-stat-service.json \
              --delay-request 50 -r cli,htmlextra \
              --verbose --color on --reporter-htmlextra-darkTheme \
              --reporter-htmlextra-export reports/ewm_stat_report.html \
              --reporter-htmlextra-title "Отчет по тестам сервиса статистики" \
              --reporter-htmlextra-logs true \
              --reporter-htmlextra-template ./tests/.github/workflows/dashboard-template.hbs
          fi

      - name: Run POSTMAN tests on feature
        if: contains(github.head_ref, 'feature')
        run: >
          newman run ./postman/feature.json 
          --delay-request 50 -r cli,htmlextra 
          --verbose --color on --reporter-htmlextra-darkTheme 
          --reporter-htmlextra-export reports/ewm_stats_report.html
          --reporter-htmlextra-title "Отчет по тестам на фичу"
          --reporter-htmlextra-logs true
          --reporter-htmlextra-template ./tests/.github/workflows/dashboard-template.hbs

      - name: Compose logs
        if: ${{ failure() }}
        run: |
          docker-compose ps
          docker-compose stop
          docker-compose logs -f stats-server >> ./stats-server.log
          docker-compose logs -f ewm-service >> ./ewm-service.log

      - name: Upload log artifact
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: ewm-log
          path: ./*.log

      - name: Archive artifacts
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: postman_tests_report
          path: reports

      - name: Compose down
        run: |
          docker-compose down